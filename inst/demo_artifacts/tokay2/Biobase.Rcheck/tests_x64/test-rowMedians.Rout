
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(Biobase)
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colnames, dirname, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,
    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,
    tapply, union, unique, unsplit, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> set.seed(1)
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Consistency checks
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> 
> # rowMedians() by rowQ()
> rowMedians2 <- function(imat) {
+   nr <- ncol(imat)
+   half <- (nr + 1)/2
+   if (nr%%2 == 1) {
+     return(rowQ(imat, half))
+   } else {
+     return((rowQ(imat, half) + rowQ(imat, half+1))/2)
+   }
+ }
> 
> cat("Consistency checks:\n")
Consistency checks:
> set.seed(1)
> for (kk in 1:20) {
+   cat("Random test #", kk, "\n", sep="")
+ 
+   # Simulate data in a matrix of any shape
+   nrow <- sample(2000, size=1)
+   ncol <- sample(2000, size=1)
+   x <- rnorm(nrow*ncol)
+   dim(x) <- c(nrow, ncol)
+ 
+   # Add NAs?
+   nas <- sample(c(TRUE,FALSE), size=1)
+   if (nas) {
+     nna <- sample(nrow*ncol, size=1)
+     x[sample(length(x), size=nna)] <- NA
+   }
+ 
+   na.rm <- nas
+   t1 <- system.time({
+     y1 <- rowMedians(x, na.rm=na.rm)
+   })
+   t2 <- system.time({
+     y2 <- apply(x, MARGIN=1, FUN=median, na.rm=na.rm)
+   })
+   # When all values of 'y2' are NA, 'y2' is logical
+   if (is.logical(y2)) y2 <- as.double(y2)
+   stopifnot(all.equal(y1,y2))
+   cat(sprintf("rowMedians()/apply(): %.3g\n", (t1/t2)[3]))
+ 
+   if (!nas) {
+     t3 <- system.time({
+       y3 <- rowMedians2(x)
+     })
+     stopifnot(all.equal(y1,y3))
+     cat(sprintf("rowMedians()/rowMedians2(): %.3g\n", (t1/t3)[3]))
+   }
+ }
Random test #1
rowMedians()/apply(): 0.263
Random test #2
rowMedians()/apply(): 0.0833
rowMedians()/rowMedians2(): 0.2
Random test #3
rowMedians()/apply(): 0
Random test #4
rowMedians()/apply(): 0.214
rowMedians()/rowMedians2(): 0.375
Random test #5
rowMedians()/apply(): 0.222
rowMedians()/rowMedians2(): 0.455
Random test #6
rowMedians()/apply(): 0.5
rowMedians()/rowMedians2(): 1
Random test #7
rowMedians()/apply(): 0.267
Random test #8
rowMedians()/apply(): 0
rowMedians()/rowMedians2(): NaN
Random test #9
rowMedians()/apply(): 0
Random test #10
rowMedians()/apply(): 0
Random test #11
rowMedians()/apply(): 0
Random test #12
rowMedians()/apply(): 0.286
Random test #13
rowMedians()/apply(): 0.5
rowMedians()/rowMedians2(): Inf
Random test #14
rowMedians()/apply(): 0.2
Random test #15
rowMedians()/apply(): 0.176
Random test #16
rowMedians()/apply(): 0.273
rowMedians()/rowMedians2(): 0.6
Random test #17
rowMedians()/apply(): 0.231
Random test #18
rowMedians()/apply(): 0.182
rowMedians()/rowMedians2(): 1
Random test #19
rowMedians()/apply(): 0.2
rowMedians()/rowMedians2(): 0.6
Random test #20
rowMedians()/apply(): 0.268
rowMedians()/rowMedians2(): 0.458
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Benchmarking
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> cat("Benchmarking:\n")
Benchmarking:
> 
> # Simulate data in a matrix of any shape
> nrow <- 1000
> ncol <- 1000
> x <- rnorm(nrow*ncol)
> dim(x) <- c(nrow, ncol)
> 
> gc()
          used (Mb) gc trigger (Mb) max used (Mb)
Ncells  580692 31.1    1264307 67.6  1086663 58.1
Vcells 2032194 15.6   12255594 93.6 12255181 93.5
> t0 <- system.time({
+   for (rr in 1:20)
+     y0 <- apply(x, MARGIN=1, FUN=median, na.rm=FALSE)
+ })
> gc()
          used (Mb) gc trigger (Mb) max used (Mb)
Ncells  580708 31.1    1264307 67.6  1193539 63.8
Vcells 2033211 15.6   12255594 93.6 12255583 93.6
> t1 <- system.time({
+   for (rr in 1:20)
+     y1 <- rowMedians(x, na.rm=FALSE)
+ })
> gc()
          used (Mb) gc trigger (Mb) max used (Mb)
Ncells  580708 31.1    1264307 67.6  1193539 63.8
Vcells 2032336 15.6   12255594 93.6 12255583 93.6
> stopifnot(all.equal(y0,y1))
> cat(sprintf("rowMedians()/apply(): %.3g\n", (t1/t0)[3]))
rowMedians()/apply(): 0.199
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Consistency checks
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> cat("Consistency checks without NAs:\n")
Consistency checks without NAs:
> for (kk in 1:20) {
+   cat("Random test #", kk, "\n", sep="")
+ 
+   # Simulate data in a matrix of any shape
+   nrow <- sample(1000, size=1)
+   ncol <- sample(1000, size=1)
+   x <- rnorm(nrow*ncol)
+   dim(x) <- c(nrow, ncol)
+ 
+   t0 <- system.time({
+     y0 <- apply(x, MARGIN=1, FUN=median, na.rm=FALSE)
+   })
+   t1 <- system.time({
+     y1 <- rowMedians(x, na.rm=FALSE)
+   })
+   stopifnot(all.equal(y0,y1))
+ } # for (kk in ...)
Random test #1
Random test #2
Random test #3
Random test #4
Random test #5
Random test #6
Random test #7
Random test #8
Random test #9
Random test #10
Random test #11
Random test #12
Random test #13
Random test #14
Random test #15
Random test #16
Random test #17
Random test #18
Random test #19
Random test #20
> 
> 
> 
> cat("Consistency checks with NAs:\n")
Consistency checks with NAs:
> for (kk in 1:20) {
+   cat("Random test #", kk, "\n", sep="")
+ 
+   # Simulate data in a matrix of any shape
+   nrow <- sample(1000, size=1)
+   ncol <- sample(1000, size=1)
+   x <- rnorm(nrow*ncol)
+   dim(x) <- c(nrow, ncol)
+ 
+   # Add NAs
+   nna <- sample(nrow*ncol-1, size=1)
+   x[sample(length(x), size=nna)] <- NA
+ 
+   t0 <- system.time({
+     y0 <- apply(x, MARGIN=1, FUN=median, na.rm=TRUE)
+     y0[is.na(y0)] <- NA
+   })
+   t1 <- system.time({
+     y1 <- rowMedians(x, na.rm=TRUE)
+   })
+   stopifnot(all.equal(y0,y1))
+ } # for (kk in ...)
Random test #1
Random test #2
Random test #3
Random test #4
Random test #5
Random test #6
Random test #7
Random test #8
Random test #9
Random test #10
Random test #11
Random test #12
Random test #13
Random test #14
Random test #15
Random test #16
Random test #17
Random test #18
Random test #19
Random test #20
> 
> proc.time()
   user  system elapsed 
  20.40    0.43   20.84 
